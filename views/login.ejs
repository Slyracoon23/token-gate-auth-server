<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Login</title>
    <%- include('head') %>
  </head>
  <body>
    <div class="container" id="content" style="display: none">
      <!-- <h1>Login</h1>
      <input type="password" name="password" id="password" />
      <input type="submit" value="Login" id="login" />
      <p id="message"></p>
    </div> -->
      <h1>SuprSketch Login!</h1>

      <button id="btn-login">Metamask Login</button>
      <!-- <button id="btn-logout">Logout</button> -->
      <p id="moralis-message"></p>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js"></script>
    <!-- <script src="https://unpkg.com/moralis-v1@1.11.0/dist/moralis.js"></script> -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script
      src="https://cdn.ethers.io/lib/ethers-5.2.umd.min.js"
      type="application/javascript"
    ></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js"></script>

    <script>
      // make content visible, hidden by default, <noscript> content will show error message for non-JS browsers.
      const content = document.getElementById('content');
      content.style.display = 'block';

      // change title
      document.title = 'Log in to ' + location.host;

      // post password to /auth
      const login = () => {
        fetch('/login', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          // body: JSON.stringify({ ethAddress }),
        })
          .then((response) => {
            // check for auth failure for rejected credentials
            if (response.status === 401) return false;

            // check for auth failure for other reasons
            if (response.status !== 200) return false;

            // auth okay
            return response.json();
          })
          .then((data) => {
            if (data && data.status === 'ok') {
              // auth success, cookie should be set
              window.location.href = '/logged-in';
              return;
            }

            // auth failure, give feedback to user
            const message = document.getElementById('message');
            message.innerText = 'Authorisation failed';
          });
      };

      // // handle password text field
      // const input = document.getElementById('password');
      // input.focus();
      // input.addEventListener('keyup', (e) => {
      //   e.preventDefault();
      //   if (e.key === 'Enter') {
      //     const password = input.value;
      //     input.value = ''; // clear input
      //     login(password);
      //   }
      // });

      // // handle submit / login button
      // const submit = document.getElementById('login');
      // submit.addEventListener('click', (e) => {
      //   e.preventDefault();
      //   const password = input.value;
      //   input.value = ''; // clear input
      //   login(password);
      // });
    </script>

    <script>
      const connectToMetamask = async () => {
        const provider = new ethers.providers.Web3Provider(
          window.ethereum,
          'any'
        );

        const [accounts, chainId] = await Promise.all([
          provider.send('eth_requestAccounts', []),
          provider.send('eth_chainId', []),
        ]);

        const signer = provider.getSigner();
        const result = { signer, chain: chainId, account: accounts[0] };
        console.log(result);
        return result;
      };

      const handleAuth = async () => {
        // Connect to Metamask
        const { signer, chain, account } = await connectToMetamask();

        if (!account) {
          throw new Error('No account found');
        }
        if (!chain) {
          throw new Error('No chain found');
        }

        // const { message } = await requestMessage(account, chain);

        const message = 'Log in using SuperSketch Club NFT';

        const signature = await signer.signMessage(message);

        // check if user has NFT

        fetchNFTs(account);
      };

      const fetchNFTs = async (address) => {
        const contract_address = '0x3ad9c40e0c104515fc31c39230e7f3f334dd6587'; // NFT contract address

        const options = {
          method: 'GET',
          headers: {
            accept: 'application/json',
            Authorization: '1411e390-1a31-46ac-8b79-b846e8d7ad2e',
          },
        };

        const NFTs = fetch(
          `https://api.nftport.xyz/v0/accounts/${address}?chain=ethereum&page_size=50&include=metadata&contract_address=0x3ad9c40e0c104515fc31c39230e7f3f334dd6587`,
          options
        )
          .then((response) => response.json())
          .then((response) => {
            const NFTs = response.nfts;

            if (_.some(NFTs, { contract_address: contract_address })) {
              console.log('NFT exists');
              login();
            } else {
              console.log('NFT does not exist');
              // NFT does not exist, give feedback to user
              const message = document.getElementById('moralis-message');
              message.innerText = 'Do not have the NFT';
            }
          })
          .catch((err) => console.error(err));
      };

      document.getElementById('btn-login').onclick = handleAuth;
    </script>

    <noscript
      >JavaScript is not detected or enabled but it is required for this
      site.</noscript
    >
  </body>
</html>
